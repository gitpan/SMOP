%include <math.h>,<assert.h>
%prefix smop_native_int
%RI SMOP__NATIVE__int
%RI.id Native int
%attr int intvalue


%method defined
    ret = SMOP__NATIVE__bool_true;
%method true
    smop_nagc_wrlock((SMOP__NAGC__Object*)invocant);
    ret = ((smop_native_int_struct*)invocant)->intvalue ? SMOP__NATIVE__bool_true : SMOP__NATIVE__bool_false;
    smop_nagc_unlock((SMOP__NAGC__Object*)invocant);
%method FETCH
    ___VALUE_FETCH___;
%method STORE
    ___VALUE_STORE___;
%method Str
    int val = SMOP__NATIVE__int_fetch(invocant);
    int len = val ? log10(abs(val))+1 : 1;
    if (val < 0) len++;
    char *tmp = malloc((len+1) * sizeof(char)); 
    snprintf(tmp,len+1,"%d",val);
    ret = SMOP__NATIVE__idconst_createn(tmp,len);
    free(tmp);

%DESTROYALL {
    
%}

%{
SMOP__Object* SMOP__NATIVE__int_create(int value) {
  SMOP__Object* ret = smop_nagc_alloc(sizeof(smop_native_int_struct));
  ret->RI = (SMOP__ResponderInterface*)SMOP__NATIVE__int;
  ((smop_native_int_struct*)ret)->intvalue = value;
  return ret;
}

int SMOP__NATIVE__int_fetch(SMOP__Object* value) {
  assert(SMOP_RI(value) == (SMOP__ResponderInterface *)SMOP__NATIVE__int);
  smop_nagc_rdlock((SMOP__NAGC__Object*)value);
  int v = ((smop_native_int_struct*)value)->intvalue;
  smop_nagc_unlock((SMOP__NAGC__Object*)value);
  return v;
}
%}
