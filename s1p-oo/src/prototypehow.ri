%prefix smop_pureprototypehow
%RI.id PrototypeHOW
%include <smop/s1p.h>,<assert.h>
%idconst goto
%idconst continuation
%idconst new

%method dispatch
  SMOP__Object* actualcapture = SMOP__NATIVE__capture_positional(interpreter,capture,3);
  SMOP__Object* actualidentifier = SMOP__NATIVE__capture_positional(interpreter,capture,2);
  SMOP__Object* actualinvocant = SMOP__NATIVE__capture_positional(interpreter,actualcapture,0);
  SMOP__Object* actualresponder = SMOP__NATIVE__capture_positional(interpreter,capture,1);


  SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
    SMOP__ID__continuation,
    SMOP__NATIVE__capture_create(interpreter,
      (SMOP__Object*[]) {SMOP_REFERENCE(interpreter,interpreter),NULL},
      (SMOP__Object*[]) {NULL}));
  SMOP__Object* frame = SMOP__Yeast__Frame_create(interpreter,
                                                 SMOP_REFERENCE(interpreter,
                                                                smop_pureprototypehow_dispatch_mold));
  yeast_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
  yeast_reg_set(interpreter,frame,1,actualresponder);
  yeast_reg_set(interpreter,frame,2,actualidentifier);
  yeast_reg_set(interpreter,frame,3,actualcapture);
  yeast_reg_set(interpreter,frame,4,actualinvocant);
  smop_back_set(interpreter,frame,continuation);

  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter), SMOP__ID__goto,SMOP__NATIVE__capture_create(interpreter,(SMOP__Object*[]) {SMOP_REFERENCE(interpreter,interpreter), frame, NULL}, (SMOP__Object*[]) {NULL}));

%method add_method
  SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
    SMOP__ID__continuation,
    SMOP__NATIVE__capture_create(interpreter,
      (SMOP__Object*[]) {SMOP_REFERENCE(interpreter,interpreter),NULL},
      (SMOP__Object*[]) {NULL}));
  SMOP__Object* frame = SMOP__Yeast__Frame_create(interpreter,
                                                 SMOP_REFERENCE(interpreter,
                                                                smop_pureprototypehow_add_method_mold));
  yeast_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
  yeast_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,capture));
  smop_back_set(interpreter,frame,continuation);

  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter), SMOP__ID__goto,SMOP__NATIVE__capture_create(interpreter,(SMOP__Object*[]) {SMOP_REFERENCE(interpreter,interpreter), frame, NULL}, (SMOP__Object*[]) {NULL}));


%method add_attribute
  SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
    SMOP__ID__continuation,
    SMOP__NATIVE__capture_create(interpreter,
      (SMOP__Object*[]) {SMOP_REFERENCE(interpreter,interpreter),NULL},
      (SMOP__Object*[]) {NULL}));

  SMOP__Object* frame = SMOP__Yeast__Frame_create(interpreter,
                                                 SMOP_REFERENCE(interpreter,
                                                                smop_pureprototypehow_add_attribute_mold));
  yeast_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
  yeast_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,capture));
  smop_back_set(interpreter,frame,continuation);

  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter), SMOP__ID__goto,SMOP__NATIVE__capture_create(interpreter,(SMOP__Object*[]) {SMOP_REFERENCE(interpreter,interpreter), frame, NULL}, (SMOP__Object*[]) {NULL}));

%method FETCH
    ___VALUE_FETCH___;

%method lookup_fail
    SMOP__Object* actualcapture = SMOP__NATIVE__capture_positional(interpreter,capture,3);
    SMOP__Object* actualidentifier = SMOP__NATIVE__capture_positional(interpreter,capture,2);
    SMOP__Object* actualinvocant = SMOP__NATIVE__capture_positional(interpreter,actualcapture,0);

    if (actualidentifier == SMOP__ID__FETCH) {
      ret = actualinvocant;
      SMOP_RELEASE(interpreter,actualidentifier);
      SMOP_RELEASE(interpreter,actualcapture);

    } else if (actualidentifier == SMOP__ID__dispatch) {
      SMOP__Object* actual_actualidentifier = SMOP__NATIVE__capture_positional(interpreter,actualcapture,2);

      if (actual_actualidentifier == SMOP__ID__FETCH) {
        SMOP__Object* actual_actualcapture = SMOP__NATIVE__capture_positional(interpreter,actualcapture,4);
        SMOP__Object* actual_actualinvocant = SMOP__NATIVE__capture_positional(interpreter,actual_actualcapture,0);

        ret = actual_actualinvocant;
        SMOP_RELEASE(interpreter,actual_actualidentifier);
        SMOP_RELEASE(interpreter,actual_actualcapture);
        SMOP_RELEASE(interpreter,actualinvocant);
        SMOP_RELEASE(interpreter,actualidentifier);
        SMOP_RELEASE(interpreter,actualcapture);

      } else {
        assert(actualidentifier->RI == SMOP__ID__new->RI);
        int retsize;
        fprintf(stderr,"Could not find method %s.\n",SMOP__NATIVE__idconst_fetch_with_null(actualidentifier, &retsize));
        abort();
      }

    } else {
      assert(actualidentifier->RI == SMOP__ID__new->RI);
      int retsize;
      fprintf(stderr,"Could not find method %s.\n",SMOP__NATIVE__idconst_fetch_with_null(actualidentifier, &retsize));
      abort();

    }

%yeast smop_pureprototypehow_dispatch_mold
    my $interpreter;
    my $responder;
    my $identifier;
    my $capture;
    my $invocant;

    my $void;
    my $result = ?SMOP__NATIVE__bool_false;

    my $how_c = $invocant."^!how"();
    my $how = $how_c."FETCH"();

    find_method:
      my $methods = $invocant."^!methods"();
      my $method_exists = $methods."exists"($identifier);

    if $method_exists { goto than } else { goto fail };
    than:
      my $method_container = $methods."postcircumfix:{ }"($identifier);
      my $method = $method_container."FETCH"();
      $result = $method."postcircumfix:( )"($capture);
      goto exit;
    fail: noop;
      my $UNKNOWN_METHOD_exists = $methods."exists"("UNKNOWN_METHOD");
      if $UNKNOWN_METHOD_exists { goto call_UNKNOWN_METHOD } else { goto lookup_fail };
      call_UNKNOWN_METHOD: 
        my $void = $invocant."UNKNOWN_METHOD"($identifier);
        goto exit;
      lookup_fail:
        $result = $how."lookup_fail"($responder, $identifier, $capture);
    exit:
    my $continuation = $interpreter."continuation"();
    my $back = $continuation."back"();
    $void = $back."setr"($result);
    $void = $interpreter."goto"($back);

%yeast smop_pureprototypehow_add_method_mold
    my $interpreter;
    my $capture;

    my $void;
    my $result = ?SMOP__NATIVE__bool_false;

    my $invocant = $capture."positional"(1);
    my $name = $capture."positional"(2);
    my $method = $capture."positional"(3);

    my $methods = $invocant."^!methods"();
    my $method_container = $methods."postcircumfix:{ }"($name);
    $void = $method_container."STORE"($method);

    my $continuation = $interpreter."continuation"();
    my $back = $continuation."back"();
    $void = $interpreter."goto"($back);

%yeast smop_pureprototypehow_add_attribute_mold
    my $interpreter;
    my $capture;

    my $scope = ?SMOP__S1P__LexicalPrelude;

    my $object = $capture."positional"(1);
    my $name = $capture."positional"(2);
    my $attribute = $capture."positional"(3);

    my $attrhash = $object."^!attributes"();
    my $attrcont = $attrhash."postcircumfix:{ }"($name);
    my $void = $attrcont."STORE"($attribute);

    my $continuation = $interpreter."continuation"();
    my $back = $continuation."back"();
    $void = $interpreter."goto"($back);

%init {
  SMOP__Object* how = smop_nagc_alloc(sizeof(smop_pureprototypehow_struct));
  how->RI = (SMOP__ResponderInterface*)RI;
  smop_s1p_lexical_prelude_insert(interpreter,"PrototypeHOW",how);
%}

%destr {
  smop_s1p_lexical_prelude_insert(interpreter,"PrototypeHOW",SMOP__NATIVE__bool_false);
%}
