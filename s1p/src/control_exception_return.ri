%prefix control_exception_return
%include <smop/s1p.h>
%prototype SMOP__ControlExceptionReturn
%RI.id Control Exception Return
%attr SMOP__Object* handled
%attr SMOP__Object* context
%attr SMOP__Object* capture
%attr SMOP__Object* routine
%getter handled
%getter context
%getter capture
%getter routine

%idconst continuation
%idconst goto

%{
  static SMOP__Object* SMOP__capture;
%}
%init {
  SMOP__capture = SMOP__Proto__create(SMOP__capture__RI);
%}
%destr {
  SMOP_RELEASE(interpreter,SMOP__capture);
%}

%method new
    SMOP__Object* exc = smop_nagc_alloc(sizeof(control_exception_return_struct));
    exc->RI = (SMOP__ResponderInterface*)RI;
    ((control_exception_return_struct*)exc)->handled = SMOP__S1P__Scalar_create(interpreter, SMOP__NATIVE__bool_false);
    ((control_exception_return_struct*)exc)->context = SMOP__S1P__Scalar_create(interpreter, SMOP__NATIVE__bool_false);
    ((control_exception_return_struct*)exc)->capture = SMOP__S1P__Scalar_create(interpreter, SMOP__NATIVE__bool_false);
    ((control_exception_return_struct*)exc)->routine = SMOP__S1P__Scalar_create(interpreter, SMOP__NATIVE__bool_false);
    ret = exc;

%method throw
  SMOP__Object* frame = SMOP__Yeast__Frame_create(interpreter,SMOP_REFERENCE(interpreter,throw_mold));
  SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                                               SMOP__ID__continuation,
                                               SMOP__NATIVE__capture_create(interpreter,
                                                                            (SMOP__Object*[]){
                                                                             SMOP_REFERENCE(interpreter,interpreter),
                                                                             NULL },
                                                                            (SMOP__Object*[]){ NULL }));
  smop_back_set(interpreter,frame,continuation);
  yeast_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
  yeast_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,invocant));
  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
              SMOP__ID__goto,
              SMOP__NATIVE__capture_create(interpreter,
                (SMOP__Object*[]){ SMOP_REFERENCE(interpreter,interpreter), SMOP_REFERENCE(interpreter,frame), NULL}, (SMOP__Object*[]){ NULL }));

%method handle_return
  SMOP__Object* frame = SMOP__Yeast__Frame_create(interpreter,SMOP_REFERENCE(interpreter,handle_return_mold));
  SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                                               SMOP__ID__continuation,
                                               SMOP__NATIVE__capture_create(interpreter,
                                                                            (SMOP__Object*[]){
                                                                             SMOP_REFERENCE(interpreter,interpreter),
                                                                             NULL },
                                                                            (SMOP__Object*[]){ NULL }));
  smop_back_set(interpreter,frame,continuation);
  yeast_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
  yeast_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,capture));
  SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
              SMOP__ID__goto,
              SMOP__NATIVE__capture_create(interpreter,
                (SMOP__Object*[]){ SMOP_REFERENCE(interpreter,interpreter), SMOP_REFERENCE(interpreter,frame), NULL}, (SMOP__Object*[]){ NULL }));

%method _compare_routines
    SMOP__Object* r1 = SMOP__NATIVE__capture_positional(interpreter, capture, 1);
    SMOP__Object* r2 = SMOP__NATIVE__capture_positional(interpreter, capture, 2);
    if (r1 == r2) {
       ret = SMOP__NATIVE__bool_true;
    } else {
       ret = SMOP__NATIVE__bool_false;
    }

%method _not_caught
    fprintf(stderr, "Uncaught return control exception.\n");
    abort();

%yeast handle_return_mold
    my $interpreter;
    my $capture;
    my $exception = $capture."positional"(1);
    my $this_routine = $capture."positional"(2);
    my $ritest_exc = ?SMOP__capture."new"($exception, ?RI);
    my $ritest = ?SMOP__S1P__ritest."postcircumfix:( )"($ritest_exc);
    my $ritest_t = $ritest."true"();
    if $ritest_t { goto catch } else { goto rethrow };
    catch:
     my $routine_c = $exception."routine"();
     my $routine = $routine_c."FETCH"();
     my $cmp = $exception."_compare_routines"($routine, $this_routine);
     if $cmp { goto handle } else { goto rethrow };
    handle:
     my $return_cap_c = $exception."capture"();
     my $return_cap = $return_cap_c."FETCH"();
     my $continuation = $interpreter."continuation"();
     my $back = $continuation."back"();
     my $void = $back."setr"($return_cap);
     $void = $interpreter."goto"($back);
    rethrow:
     $void = $exception."throw"();

%yeast throw_mold
    my $interpreter;
    my $invocant;
    my $stack = $interpreter."continuation"();
    my $current = $stack."FETCH"();
    bt_up:
     my $back = $current."back"();
     my $has_back = $back."true"();
     if $has_back { goto check_control } else { goto fail };
    check_control:
     my $ctrl = $back."control"();
     my $has_ctrl = $ctrl."true"();
     if $has_ctrl { goto handle } else { goto redo_bt_up };
    handle:
     my $capture = ?SMOP__capture."new"($invocant);
     my $outer = $back."back"();
     my $result = $ctrl."postcircumfix:( )"($capture, :"cc"($outer));
    fail:
     my $void = $invocant."_not_caught"();
    redo_bt_up:
     $current = $back."FETCH"();
     goto bt_up;

%method FETCH
  ___VALUE_FETCH___;
%method STORE
  ___VALUE_STORE___;

%DESTROYALL {
  SMOP_RELEASE(interpreter,((control_exception_return_struct*)invocant)->handled);
  SMOP_RELEASE(interpreter,((control_exception_return_struct*)invocant)->context);
  SMOP_RELEASE(interpreter,((control_exception_return_struct*)invocant)->capture);
%}
