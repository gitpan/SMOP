%prefix smop_s1p_hash_bvalue
%RI.id hash bvalue
%attr SMOP__Object* owner
%attr SMOP__Object* key
%getter owner
%getter key
%idconst continuation
%idconst goto
%{
    SMOP__Object* SMOP__S1P__Hash_BValue_create(SMOP__Object* interpreter, SMOP__Object* owner, SMOP__Object* key) {
        smop_s1p_hash_bvalue_struct* bvalue = (smop_s1p_hash_bvalue_struct*) smop_nagc_alloc(sizeof(smop_s1p_hash_bvalue_struct));
        bvalue->RI = (SMOP__ResponderInterface*)RI;
        bvalue->key = key;
        bvalue->owner = owner;
        return (SMOP__Object*) bvalue;
    }
static SMOP__Object* DUMP(SMOP__Object* interpreter,
                                SMOP__ResponderInterface* responder,
                                SMOP__Object* obj) {

  smop_s1p_hash_bvalue_struct* bvalue = (smop_s1p_hash_bvalue_struct*) obj;
  return smop_dump_create((SMOP__Object*[]) {
      SMOP_DUMP_NAGC,
      smop_dump_attr_create("key"),smop_dump_obj_create(bvalue->key),
      smop_dump_attr_create("owner"),smop_dump_obj_create(bvalue->owner),
      NULL
  });
}
%}

%DESTROYALL {
    smop_nagc_wrlock((SMOP__NAGC__Object*)invocant);
    SMOP__Object* owner = ((smop_s1p_hash_bvalue_struct*)invocant)->owner;
    ((smop_s1p_hash_bvalue_struct*)invocant)->owner = NULL;
    SMOP__Object* key = ((smop_s1p_hash_bvalue_struct*)invocant)->key;
    ((smop_s1p_hash_bvalue_struct*)invocant)->key = NULL;
    smop_nagc_unlock((SMOP__NAGC__Object*)invocant);
    if (owner) SMOP_RELEASE(interpreter,owner);
    if (key) SMOP_RELEASE(interpreter,key);
%}

%method BIND
    SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
      SMOP__ID__continuation,
      SMOP__NATIVE__capture_create(interpreter,
        (SMOP__Object*[]) {SMOP_REFERENCE(interpreter,interpreter),NULL},
        (SMOP__Object*[]) {NULL}));

    SMOP__Object* frame = SMOP__Yeast__Frame_create(interpreter,SMOP_REFERENCE(interpreter,bind_mold));
    yeast_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
    yeast_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,capture));
    yeast_reg_set(interpreter,frame,2,continuation);
    SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__goto,
      SMOP__NATIVE__capture_create(interpreter,
       (SMOP__Object*[]) {SMOP_REFERENCE(interpreter,interpreter),frame,NULL},
       (SMOP__Object*[]) {NULL})
    );
    ret = SMOP_REFERENCE(interpreter,invocant);


%method FETCH
    SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
      SMOP__ID__continuation,
      SMOP__NATIVE__capture_create(interpreter,
        (SMOP__Object*[]) {SMOP_REFERENCE(interpreter,interpreter),NULL},
        (SMOP__Object*[]) {NULL}));

    SMOP__Object* frame = SMOP__Yeast__Frame_create(interpreter,SMOP_REFERENCE(interpreter,fetch_mold));
    yeast_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
    yeast_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,capture));
    yeast_reg_set(interpreter,frame,2,continuation);
    SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__goto,
      SMOP__NATIVE__capture_create(interpreter,
       (SMOP__Object*[]) {SMOP_REFERENCE(interpreter,interpreter),frame,NULL},
       (SMOP__Object*[]) {NULL})
    );

%method STORE
    SMOP__Object* continuation = SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
      SMOP__ID__continuation,
      SMOP__NATIVE__capture_create(interpreter,
        (SMOP__Object*[]) {SMOP_REFERENCE(interpreter,interpreter),NULL},
        (SMOP__Object*[]) {NULL}));

    SMOP__Object* frame = SMOP__Yeast__Frame_create(interpreter,SMOP_REFERENCE(interpreter,store_mold));
    yeast_reg_set(interpreter,frame,0,SMOP_REFERENCE(interpreter,interpreter));
    yeast_reg_set(interpreter,frame,1,SMOP_REFERENCE(interpreter,capture));
    yeast_reg_set(interpreter,frame,2,continuation);
    SMOP_DISPATCH(interpreter, SMOP_RI(interpreter),
                SMOP__ID__goto,
      SMOP__NATIVE__capture_create(interpreter,
       (SMOP__Object*[]) {SMOP_REFERENCE(interpreter,interpreter),frame,NULL},
       (SMOP__Object*[]) {NULL})
    );


%yeast bind_mold
    my $interpreter;
    my $capture;
    my $back;
    my $invocant = $capture."positional"(0);
    my $owner = $invocant."owner"();
    my $key = $invocant."key"();
    my $val = $capture."positional"(1);
    my $void = $owner."bind_key"($key, $val);
    $void = $interpreter."goto"($back);

%yeast store_mold
    my $interpreter;
    my $capture;
    my $back;
    my $continuation = $interpreter."continuation"();
    my $void = $continuation."set_back"($back);
    my $invocant = $capture."positional"(0);
    my $owner = $invocant."owner"();
    my $key = $invocant."key"();
    my $val = $capture."positional"(1);
    my $container = $owner."lookup_key"($key);
    my $void = $container."STORE"($val);
    my $void = $interpreter."goto"($back);

%yeast fetch_mold
    my $interpreter;
    my $capture;
    my $back;
    my $invocant = $capture."positional"(0);
    my $owner = $invocant."owner"();
    my $key = $invocant."key"();
    my $container = $owner."lookup_key"($key);
    my $res = $container."FETCH"();
    my $void = $back."setr"($res);
    $void = $interpreter."goto"($back);
%init {
  ((SMOP__ResponderInterface*)RI)->DUMP = DUMP;
%}
